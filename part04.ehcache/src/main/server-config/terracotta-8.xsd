<?xml version="1.0" encoding="UTF-8" ?>

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
  targetNamespace="http://www.terracotta.org/config"
  xmlns="http://www.terracotta.org/config" version="8">

  <xs:element name="tc-config">
    <xs:complexType>
      <xs:all>
        <xs:element name="tc-properties" type="tc-properties" minOccurs="0">
          <xs:annotation>
            <xs:documentation>
              This section defines the tc-properties
              which the user wants to set
              The order in which the properties would be overridden is the following
                    tc-properties from the installation jar
                    tc-properties from the tc-config
                    tc-properties from local tc.properties file
                    tc-properties set via system properties
              Note that the local tc.properties has higher
              preference than this section
            </xs:documentation>
          </xs:annotation>
        </xs:element>

        <xs:element name="servers" type="servers" minOccurs="0">
          <xs:annotation>
            <xs:documentation>
              This section defines the servers present
              in your Terracotta system. You can omit
              this section entirely, in which case it
              behaves as if there's a single server
              with all values set at their default.
              You can include exactly one server entry
              here (the common case), or, if you're
              going to run multiple servers for
              failover, you can include multiple
              servers here.

              If you include more than one server
              here, note that each server will need to
              know which configuration it should use
              as it starts up. If you name your
              servers according to the host that they
              run on (and no host contains more than
              one server), then they will find the
              hostname themselves and work
              automatically.

              If you name your servers in any other
              fashion (and, again, only if there is
              more than one 'server' element present
              here), then you will need to pass the
              command-line option "-n <![CDATA[ <name>]]>"
              to the start-tc-server script, passing
              it the name of a server configuration
              from this file.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="clients" type="client" minOccurs="0">
          <xs:annotation>
            <xs:documentation>
              This section contains settings that affect
              all clients that connect to the system.

              Note that while these settings are applied
              uniformly across all clients, this does not
              prevent you from applying different settings
              to various clients. There are two ways of
              doing this:

              Certain parameters ('logs', below) undergo
              parameter expansion before being used by the
              client. This allows you to use various
              predefined substitutions (like '%h' for
              host), or a general one (%(myprop) to use
              the value of Java system property 'myprop'),
              for these values; expansions are carried out
              in each client's JVM independently.

              For each client to have its own
              configuration you can set 'tc.config' to the
              configuration file. If the configuration
              model is production then the 'application'
              section for all of the clients comes from
              the application section of the server's
              config file.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:all>
    </xs:complexType>
  </xs:element>
  
  <xs:complexType name="garbage-collection">
    <xs:all>
      <xs:element name="enabled" type="xs:boolean" minOccurs="0" default="false" />
      <xs:element name="verbose" type="xs:boolean" minOccurs="0" default="false" />
      <xs:element name="interval" type="positive-int" minOccurs="0" default="3600" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="security">
    <xs:all>
      <xs:element name="ssl" type="ssl" minOccurs="1" maxOccurs="1" />
      <xs:element name="keychain" type="keychain" minOccurs="1" maxOccurs="1" />
      <xs:element name="auth" type="auth" minOccurs="1" maxOccurs="1" />
      <xs:element name="management" type="management" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="ssl">
    <xs:all>
      <xs:element name="certificate" type="non-blank-token" minOccurs="1" maxOccurs="1" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="keychain">
    <xs:all>
      <xs:element name="class" type="non-blank-token" minOccurs="0" maxOccurs="1" default="com.terracotta.management.keychain.FileStoreKeyChain" />
      <xs:element name="url" type="non-blank-token" minOccurs="1" maxOccurs="1" />
      <xs:element name="secret-provider" type="non-blank-token" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="auth">
    <xs:all>
      <xs:element name="realm" type="non-blank-token" minOccurs="0" maxOccurs="1" default="com.tc.net.core.security.ShiroIniRealm" />
      <xs:element name="url" type="non-blank-token" minOccurs="1" maxOccurs="1" />
      <xs:element name="user" type="non-blank-token" minOccurs="0" maxOccurs="1" default="terracotta" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="management">
    <xs:all>
      <xs:element name="ia" type="non-blank-token" minOccurs="0" maxOccurs="1" />
      <xs:element name="timeout" type="non-negative-int" minOccurs="0" maxOccurs="1" />
      <xs:element name="hostname" type="non-blank-token" minOccurs="0" maxOccurs="1" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="restartable">
    <xs:attribute name="enabled" use="optional" type="xs:boolean" default="false"/>
  </xs:complexType>
  
  <xs:complexType name="offheap">
    <xs:sequence>
      <xs:element name="enabled" type="xs:boolean" minOccurs="0" maxOccurs="1" default="false" />
      <xs:element name="maxDataSize" type="xs:string" minOccurs="1" maxOccurs="1" />
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="authentication-mode">
    <xs:annotation>
      <xs:documentation xmlns="http://www.w3.org/1999/xhtml">Describes the authentication mode,
        which can be either a JAAS LoginConfig name or a JMX password-file location.
        If unset or empty, the default JMX password-file location is used.
      </xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="login-config-name" type="xs:string" minOccurs="0" />
      <xs:element name="password-file" type="path" minOccurs="0"
          default="%(java.home)/lib/management/jmxremote.password" />
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="authentication">
    <xs:all>
      <xs:element name="mode" type="authentication-mode" minOccurs="0" />
      <xs:element name="access-file" type="path" minOccurs="0"
        default="%(java.home)/lib/management/jmxremote.access" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="http-authentication">
    <xs:all>
      <xs:element name="user-realm-file" type="path" minOccurs="1" maxOccurs="1" />
    </xs:all>
  </xs:complexType>

  <xs:complexType name="update-check">
    <xs:all>
      <xs:element name="enabled" type="xs:boolean" minOccurs="0" default="true"/>
      <xs:element name="period-days" type="positive-int" minOccurs="0" default="7"/>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="tc-properties">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element name="property" type="property">
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="property">
      <xs:attribute name="name" type="xs:string" use="required"/>
      <xs:attribute name="value" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:complexType name="server">
    <xs:annotation>
      <xs:documentation xmlns="http://www.w3.org/1999/xhtml">
        Data specific to one of your servers.
      </xs:documentation>
    </xs:annotation>

    <xs:all>
      <xs:element name="offheap" type="offheap" minOccurs="0" maxOccurs="1" />
    
      <xs:element name="authentication" type="authentication" minOccurs="0">
        <xs:annotation>
          <xs:documentation xmlns="http://www.w3.org/1999/xhtml"> Turn on JMX authentication for the Terracotta Server, Enterprise Edition.
            An empty tag &lt;authentication/&gt; defaults to the standard Java JMX authentication mechanism referring
            to password and access files in: $JAVA_HOME/jre/lib/management.
            <ul>
              <li>$JAVA_HOME/jre/lib/management/jmxremote.password</li>
              <li>$JAVA_HOME/jre/lib/management/jmxremote.access</li>
            </ul>
            You must modify these files as such (if none exist create them):
            <p>jmxremote.password</p>
            add a line to the end of the file declaring your username and password followed by a caridge return:
            <p>secretusername secretpassword</p>
            <p>jmxremote.access</p>
            add the following line (with a caridge return) to the end of your file:
            <p>secretusername      readwrite</p>
            You must also:<br/>
            $ chmod 500 jmxremote.password<br/>
            $ chown &lt;user who will execute the tc-server&gt; jmxremote.password
          </xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:element name="http-authentication" type="http-authentication" minOccurs="0">
        <xs:annotation>
          <xs:documentation xmlns="http://www.w3.org/1999/xhtml"> Turn on authentication for the embedded Terracotta HTTP Server. This requires a properties file that contains the users and passwords that have access to the HTTP server.
          <br/>
          The format of the properties file is:
      <p>  username: password [,rolename ...]</p>
      Passwords may be clear text, obfuscated or checksummed. The class <code>com.mortbay.Util.Password</code> should be used to generate obfuscated passwords or password checksums.
          </xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:element name="data" type="path" minOccurs="0" maxOccurs="1"
        default="data">
        <xs:annotation>
          <xs:documentation>
            Where should the server store its persistent
            data? This value undergoes parameter
            substitution before being used; this allows you
            to use placeholders like '%h' (for the hostname)
            or '%(com.mycompany.propname)' (to substitute in
            the value of Java system property
            'com.mycompany.propname'). Thus, a value of
            'server-data-%h' would expand to
            'server-data-artichoke' if running on host
            'artichoke'.

            If this is a relative path, then it is
            interpreted relative to the current working
            directory of the server (that is, the directory
            you were in when you started the server). It is
            thus recommended that you specify an absolute
            path here.

            Default: 'data'

            This places the 'data' directory in the
            directory you were in when you invoked
            'start-tc-server'.
          </xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:element name="index" type="path" minOccurs="0" maxOccurs="1" 
      default="index">
        <xs:annotation>
          <xs:documentation>
            Where should the server store its search index
            data?

            If this is a relative path, then it is
            interpreted relative to the current working
            directory of the server (that is, the directory
            you were in when you started the server). It is
            thus recommended that you specify an absolute
            path here.

            Default: "index" relative to the server's data path
          </xs:documentation>
        </xs:annotation>
      </xs:element>


      <xs:element name="logs" type="path" minOccurs="0"
        default="logs">
        <xs:annotation>
          <xs:documentation>
            In which directory should the server store its
            log files? Again, this value undergoes parameter
            substitution before being used; thus, a value
            like 'server-logs-%h' would expand to
            'server-logs-artichoke' if running on host
            'artichoke'.

            If this is a relative path, then it is
            interpreted relative to the current working
            directory of the server (that is, the directory
            you were in when you started server). It is thus
            recommended that you specify an absolute path
            here.

            Default: 'logs'

            This places the 'logs' directory in the
            directory you were in when you invoked
            'start-tc-server'.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="data-backup" type="path" minOccurs="0" maxOccurs="1" default="data-backup">
        <xs:annotation>
          <xs:documentation>
            Where the data should be stored in case a backup call is initiated.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="tsa-port" type="bind-port" minOccurs="0" maxOccurs="1"
        default="9510">
        <xs:annotation>
          <xs:documentation>
            On what port should the server listen for
            connections from clients? This can be any
            port you like, but note that ports below 1024
            typically require 'root' privileges to use on
            Unix-style systems (Linux, Solaris).

            Default:9510
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="jmx-port" type="bind-port" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>
            On what port should the server listen for
            connections from the Terracotta administration
            console? This can be any port you like, but note
            that ports below 1024 typically require 'root'
            privileges to use on Unix-style systems (Linux,
            Solaris).

            Default: "tsa-port" + 10
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="tsa-group-port" type="bind-port" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>
            Port for server to server communication.
            This can be any port you like, but note that ports
            below 1024 typically require 'root' privileges to
            use on Unix-style systems (Linux, Solaris).

            Default: "tsa-port" + 20
          </xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:element name="security" type="security" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            Configuration of this server's security, ie: SSL and
            authentication.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:all>
    
    <xs:attribute name="host" type="host" use="optional">
      <xs:annotation>
        <xs:documentation>
          The host that the server runs on, expansion parameters
          may be used in this attribute.  Defaults to "%i" (the
          machine IP address).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="non-blank-token"
      use="optional">
      <xs:annotation>
        <xs:documentation>
          The symbolic name of the server, expansion parameters may
          be used.  Defaults to "host:tsa-port".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="bind" type="non-blank-token" use="optional" default="0.0.0.0">
      <xs:annotation>
        <xs:documentation>
          The address this server should bind its network listeners to. By default network listeners
          will be available on all local addresses (ie. 0.0.0.0)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

  </xs:complexType>

  <xs:complexType name="client">
    <xs:annotation>
      <xs:documentation>
        This section contains settings that affect all clients
        that connect to the system.

        Note that while these settings are applied uniformly
        across all clients, this does not prevent you from
        applying different settings to various clients. There
        are two ways of doing this:

        - Certain parameters ('logs', below) undergo parameter
        expansion before being used by the client. This allows
        you to use various predefined substitutions (like '%h'
        for host), or a general one (%(myprop) to use the value
        of Java system property 'myprop'), for these values;
        expansions are carried out in each client's JVM
        independently.

        - For each client to have its own configuration you can
        set 'tc.config' to the configuration file. If the
        configuration model is production then the 'application'
        section for all of the clients comes from the
        application section of the server's config file.
      </xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element name="logs" type="path" minOccurs="0" maxOccurs="1"
        default="logs-%i">
        <xs:annotation>
          <xs:documentation>
            Where should the client write its log files?

            This value undergoes parameter substitution
            before being used; thus, a value like
            'client-logs-%h' would expand to
            'client-logs-banana' if running on host
            'banana'.

            If this is a relative path, then it is
            interpreted relative to the current working
            directory of the client (that is, the directory
            you were in when you started the program that
            uses Terracotta services). It is thus
            recommended that you specify an absolute path
            here.

            Default: 'logs-%i';

            this places the logs in a directory relative to
            the directory you were in when you invoked the
            program that uses Terracotta services (your
            client), and calls that directory, for example,
            'logs-10.0.0.57' if the machine that the client
            is on has assigned IP address 10.0.0.57.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:all>
  </xs:complexType>
  
  <xs:complexType name="servers">
    <xs:annotation>
      <xs:documentation>
        This section defines the servers present in your
        Terracotta system. You can omit this section entirely, in
        which case it behaves as if there's a single server with
        all values set at their default. You can include exactly
        one server entry here (the common case), or, if you're
        going to run multiple servers for failover, you can
        include multiple servers here.

        If you include more than one server here, note that each
        server will need to know which configuration it should use
        as it starts up. If you name your servers according to the
        host that they run on (and no host contains more than one
        server), then they will find the hostname themselves and
        work automatically.

        If you name your servers in any other fashion (and, again,
        only if there is more than one 'server' element present
        here), then you will need to pass the command-line option
        "-n
        <![CDATA[ <name>]]>
        " to the start-tc-server script, passing it the name of a
        server configuration from this file.
      </xs:documentation>
    </xs:annotation>
    <xs:sequence maxOccurs="1" minOccurs="0">
      <xs:element name="server" type="server" maxOccurs="unbounded" minOccurs="0" />
      <xs:element name="mirror-group" type="mirror-group" maxOccurs="unbounded" minOccurs="0" />
      <xs:element name="update-check" type="update-check" maxOccurs="1" minOccurs="0" />
      <xs:element name="garbage-collection" type="garbage-collection" minOccurs="0" maxOccurs="1" />
      <xs:element name="restartable" type="restartable" minOccurs="0" maxOccurs="1"/>
      <xs:element name="client-reconnect-window" type="non-negative-int" minOccurs="0" maxOccurs="1" default="120" />
    </xs:sequence>
    <xs:attribute name="secure" type="xs:boolean" use="optional" default="false" />
  </xs:complexType>

  <xs:complexType name="bind-port">
    <xs:simpleContent>
      <xs:extension base="port">
        <xs:attribute name="bind" type="non-blank-token" use="optional">
          <xs:annotation>
            <xs:documentation>
              The address this server should bind its network listeners to. By default network listeners
              will be available on all local addresses (ie. 0.0.0.0)
            </xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="mirror-group">
    <xs:annotation>
        <xs:documentation>
        </xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="server" type="server" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="group-name" type="xs:string" use="optional" />
    <xs:attribute name="election-time" type="positive-int" use="optional" default="5" />
  </xs:complexType>

  <xs:simpleType name="non-blank-token">
    <xs:restriction base="xs:token">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="path">
    <xs:annotation>
      <xs:documentation>
        Several different predefined substitutions are available
        for your use:

        %h expands to the fully-qualified host name of the
        machine running your application

        %i expands to the IP adress of the machine running
        your application

        %H refers to the home directory of the user running
        running your application

        %n refers to the username of the user running
        running your application

        %o refers to the name of the operating system
        running your application

        %a refers to the processor architecture of the
        machine running running your application %v refers
        to the version of the operating system running
        running your application

        %t refers to the temporary directory of the machine
        running your application(on Linux or Solaris, e.g.,
        /tmp)

        %(property) refers to the java system property of
        the JVM running on the machine(e.g. %(java.home) )
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:token">
      <xs:minLength value="1" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="fixed-string-unlimited">
    <xs:restriction base="xs:token">
      <xs:enumeration value="unlimited" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="fixed-string-none">
    <xs:restriction base="xs:token">
      <xs:enumeration value="none" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="positive-int">
    <xs:restriction base="xs:positiveInteger">
      <xs:maxInclusive value="2147483647" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="non-negative-int">
    <xs:restriction base="xs:nonNegativeInteger">
      <xs:maxInclusive value="2147483647" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="positive-int-or-none">
    <xs:union memberTypes="positive-int fixed-string-none" />
  </xs:simpleType>

  <xs:simpleType name="port">
    <xs:restriction base="xs:nonNegativeInteger">
      <xs:minInclusive value="0" />
      <xs:maxInclusive value="65535" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="host">
    <xs:restriction base="xs:string">
      <xs:whiteSpace value="collapse" />
      <xs:minLength value="1" />
      <xs:maxLength value="255" />
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="qualified-class-name">
    <xs:restriction base="xs:token">
      <xs:pattern
        value="[A-Za-z_][A-Za-z_0-9$]*(\.[A-Za-z_][A-Za-z_0-9$]*)*" />
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
